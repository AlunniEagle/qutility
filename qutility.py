# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QUtility
                                 A QGIS plugin
 Un toolbox multifunzione per QGIS: rinomina layer, cambia tipi di campo, importa shapefile da ZIP e altro ancora, tutto in pochi clic.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-06
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Lorenzo Alunni
        email                : gis@eagleprojects.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication # type: ignore
from qgis.PyQt.QtGui import QIcon # type: ignore
from qgis.PyQt.QtWidgets import QAction, QMessageBox # type: ignore
from qgis.core import (QgsMessageLog, Qgis, QgsMapLayer, QgsWkbTypes, 
                       QgsCoordinateReferenceSystem, QgsCoordinateTransform, 
                       QgsProject, QgsProcessingContext, QgsProcessingFeedback,
                       QgsVectorLayer) # type: ignore

# Initialize Qt resources from file resources.py
from .resources import *
from .resources_rc import *
# Import the code for the dialog
from .qutility_dialog import QUtilityDialog
import os.path


class QUtility:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QUtility_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QUtility')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QUtility', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        status_tip,
        whats_this,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qutility/icon.png'

        # Crea un'istanza dell'icona da usare ovunque
        self.plugin_icon = QIcon(icon_path)

        self.add_action(
            icon_path,
            text=self.tr(u'QUtility'),
            callback=self.run,
            status_tip=self.tr(u'A multi-function toolbox for QGIS'),
            whats_this=self.tr(u'A multi-function toolbox for QGIS'),
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        from qgis.core import QgsApplication # type: ignore
        QgsApplication.instance().processEvents()


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QUtility'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QUtilityDialog()

            # Get version from metadata.txt file
            metadata_file = os.path.join(self.plugin_dir, 'metadata.txt')
            plugin_version = 'N/A'

            try:
                import configparser
                config = configparser.ConfigParser()
                config.read(metadata_file)
                plugin_version = config['general']['version']
            except (KeyError, configparser.Error, FileNotFoundError):
                plugin_version = 'N/A'

            qgis_version = Qgis.QGIS_VERSION
            self.dlg.labelPluginVersion.setText(f"Plugin version: {plugin_version}")
            self.dlg.labelQgisVersion.setText(f"QGIS version: {qgis_version}")

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def run_overlaps_counter(self):
            """Esegue lo script processing per Overlaps Counter"""
            try:
                import time
                start_time = time.time()
                
                # Recupera i layer selezionati dai combobox
                layer1 = self.dlg.lyr1_oc.currentLayer()  # Layer su cui fare il conteggio
                layer2 = self.dlg.lyr2_oc.currentLayer()  # Layer sovrapposto da conteggiare
                
                # Verifica che tutti i layer necessari siano selezionati
                if not all([layer1, layer2]):
                    QMessageBox.warning(
                        self.dlg,
                        "Error",
                        "Select both required layers before proceeding"
                    )
                    return
                
                # Recupera il percorso del file di output
                output_path = self.dlg.cartout_oc.filePath()
                
                # Verifica che il percorso di output sia selezionato
                if not output_path:
                    QMessageBox.warning(
                        self.dlg,
                        "Error",
                        "Select output file before proceeding"
                    )
                    return
                
                # Verifica che i layer siano in EPSG:4326
                if layer1.crs().authid() != 'EPSG:4326':
                    reply = QMessageBox.question(
                        self.dlg,
                        "Coordinate System", 
                        f"The layer '{layer1.name()}' is not in EPSG:4326 ({layer1.crs().authid()}).\n"
                        "The process may not work correctly.\n"
                        "Continue anyway?",
                        QMessageBox.Yes | QMessageBox.No,
                        QMessageBox.No
                    )
                    if reply == QMessageBox.No:
                        return
                        
                if layer2.crs().authid() != 'EPSG:4326':
                    reply = QMessageBox.question(
                        self.dlg,
                        "Coordinate System",
                        f"The layer '{layer2.name()}' is not in EPSG:4326 ({layer2.crs().authid()}).\n"
                        "The process may not work correctly.\n"
                        "Continue anyway?",
                        QMessageBox.Yes | QMessageBox.No,
                        QMessageBox.No
                    )
                    if reply == QMessageBox.No:
                        return
                
                # Determina se usare solo gli elementi selezionati
                use_selected_layer1 = self.dlg.ckbox_lyr1_oc.isChecked() and self.dlg.ckbox_lyr1_oc.isEnabled()
                use_selected_layer2 = self.dlg.ckbox_lyr2_oc.isChecked() and self.dlg.ckbox_lyr2_oc.isEnabled()
                
                # Verifica che ci siano elementi da processare se si usano le selezioni
                if use_selected_layer1 and layer1.selectedFeatureCount() == 0:
                    QMessageBox.warning(
                        self.dlg,
                        "Error", 
                        f"The layer '{layer1.name()}' has no selected features"
                    )
                    return
                    
                if use_selected_layer2 and layer2.selectedFeatureCount() == 0:
                    QMessageBox.warning(
                        self.dlg,
                        "Error", 
                        f"The layer '{layer2.name()}' has no selected features"
                    )
                    return
                
                # Importa e istanzia direttamente l'algoritmo
                from .overlaps_counter import Num_cavi_su_infrastruttua
                algorithm = Num_cavi_su_infrastruttua()
                
                # Prepara i layer di input considerando le selezioni
                input_layer1 = layer1
                input_layer2 = layer2
                
                # Se ci sono selezioni attive, crea layer temporanei con solo le features selezionate
                if use_selected_layer1:
                    # Crea un layer temporaneo con solo gli elementi selezionati
                    import tempfile
                    selected_features1 = layer1.selectedFeatures()
                    temp_layer1 = QgsVectorLayer(f"LineString?crs={layer1.crs().authid()}", 
                                            f"{layer1.name()}_selected", "memory")
                    temp_layer1.dataProvider().addAttributes(layer1.fields())
                    temp_layer1.updateFields()
                    temp_layer1.dataProvider().addFeatures(selected_features1)
                    input_layer1 = temp_layer1
                    QgsMessageLog.logMessage(f"Created a temporary layer for {layer1.name()} with {len(selected_features1)} selected features", "QUtility", Qgis.Info)
                    
                if use_selected_layer2:
                    # Crea un layer temporaneo con solo gli elementi selezionati  
                    selected_features2 = layer2.selectedFeatures()
                    temp_layer2 = QgsVectorLayer(f"LineString?crs={layer2.crs().authid()}", 
                                            f"{layer2.name()}_selected", "memory")
                    temp_layer2.dataProvider().addAttributes(layer2.fields())
                    temp_layer2.updateFields()
                    temp_layer2.dataProvider().addFeatures(selected_features2)
                    input_layer2 = temp_layer2
                    QgsMessageLog.logMessage(f"Created a temporary layer for {layer2.name()} with {len(selected_features2)} selected features", "QUtility", Qgis.Info)
                
                QgsMessageLog.logMessage(f"Temporary layers: Layer1={input_layer1.name()}, Layer2={input_layer2.name()}", "QUtility", Qgis.Info)
                
                # Prepara i parametri per lo script processing
                parameters = {
                    'infrastruttura_4326': input_layer1,  # Layer su cui fare il conteggio
                    'cavi_4326': input_layer2,            # Layer sovrapposto da conteggiare
                    'InfrastrutturaConNcavi': output_path
                }
                
                # Esegui lo script processing
                QgsMessageLog.logMessage(
                    "Starting Overlaps Counter processing...", 
                    "QUtility", 
                    Qgis.Info
                )
                
                # Esegui il processing direttamente
                context = QgsProcessingContext()
                feedback = QgsProcessingFeedback()
                
                # Esegui l'algoritmo
                results = algorithm.processAlgorithm(parameters, context, feedback)
                
                # Carica il layer risultante nel progetto QGIS
                try:
                    if results and 'InfrastrutturaConNcavi' in results:
                        # Verifica che il file di output esista
                        if os.path.exists(output_path):
                            layer_name = f"Overlaps_Count_{layer1.name()}"
                            output_layer = QgsVectorLayer(output_path, layer_name, "ogr")
                            
                            if output_layer.isValid():
                                QgsProject.instance().addMapLayer(output_layer)
                                QgsMessageLog.logMessage(f"Layer {layer_name} loaded into the project", "QUtility", Qgis.Info)
                                
                                # Calcola statistiche sui risultati
                                total_features = output_layer.featureCount()
                                overlaps_field = 'n_overlaps'
                                
                                features_with_overlaps = 0
                                max_overlaps = 0
                                total_overlaps = 0
                                
                                try:
                                    # Verifica che il campo n_overlaps esista
                                    field_names = [f.name() for f in output_layer.fields()]
                                    if overlaps_field in field_names:
                                        for feature in output_layer.getFeatures():
                                            n_overlaps = feature[overlaps_field]
                                            if n_overlaps and n_overlaps > 0:
                                                features_with_overlaps += 1
                                                total_overlaps += n_overlaps
                                                max_overlaps = max(max_overlaps, n_overlaps)
                                    else:
                                        # Se il campo non esiste, cerca campi simili
                                        overlaps_candidates = [f for f in field_names if 'overlap' in f.lower() or 'count' in f.lower()]
                                        if overlaps_candidates:
                                            overlaps_field = overlaps_candidates[0]
                                            for feature in output_layer.getFeatures():
                                                n_overlaps = feature[overlaps_field]
                                                if n_overlaps and n_overlaps > 0:
                                                    features_with_overlaps += 1
                                                    total_overlaps += n_overlaps
                                                    max_overlaps = max(max_overlaps, n_overlaps)
                                                    
                                    QgsMessageLog.logMessage(f"Statistics: {total_features} total features, {features_with_overlaps} with overlaps", "QUtility", Qgis.Info)
                                    
                                except Exception as stats_error:
                                    QgsMessageLog.logMessage(f"An error occurred while calculating the statistics: {str(stats_error)}", "QUtility", Qgis.Warning)
                                    features_with_overlaps = "N/A"
                                    max_overlaps = "N/A"
                                    total_overlaps = "N/A"
                            else:
                                QgsMessageLog.logMessage(f"Invalid layer {layer_name}", "QUtility", Qgis.Warning)
                        else:
                            QgsMessageLog.logMessage(f"Output file not found: {output_path}", "QUtility", Qgis.Warning)
                            
                except Exception as layer_error:
                    QgsMessageLog.logMessage(f"Error loading layer: {str(layer_error)}", "QUtility", Qgis.Critical)
                
                # Calcola il tempo di esecuzione
                end_time = time.time()
                execution_time = end_time - start_time
                minutes = int(execution_time // 60)
                seconds = execution_time % 60
                if minutes > 0:
                    QgsMessageLog.logMessage(f"⏱️ Processing completed in {minutes} minutes and {seconds:.2f} seconds", "QUtility", Qgis.Info)
                else:
                    QgsMessageLog.logMessage(f"⏱️ Processing completed in {seconds:.2f} seconds", "QUtility", Qgis.Info)

                # Mostra popup di successo
                success_message = "Overlaps Counter processing completed successfully!\n\n"
                
                QMessageBox.information(self.dlg, "Overlaps Counter", success_message)
                
            except Exception as e:
                QgsMessageLog.logMessage(f"An error occurred during the execution of Overlaps Counter: {str(e)}", "QUtility", Qgis.Critical)
                self.iface.messageBar().pushCritical(
                    "Error", 
                    f"An error occurred during the execution of Overlaps Counter: {str(e)}"
                )